//#include <iostream> 
//#include <iomanip>
//#include <string> 
//using namespace std;
//
#pragma region 필기
//함수 복습

// 함수의 기본 형태
// 반환타입 함수명()
// {
// 함수 호출 시 실행할 명령문
//}


// 1. return 값이 존재하는 경우
//반환타입 함수명()
// {
// return 반환타입에 맞는 값;
// }

// 2. return 값이 존재하지 않는 경우 (void)
//void 함수명()
// {
// return 반환타입에 맞는 값;
// }

// 함수 호출 방법
// 함수명();
// 
// return의 기능
//1. 함수를 종료하고, 함수를 호출한 위치로 이동시킴 (return이 없는 경우 함수의 명령이 끝나면 자동으로 종료)
//2. return 다음에 값이 작성되면, 함수를 호출한 위치에 해당 값을 전달
//3. C/C++의 return 값은 1개만 전달 가능

// 함수의 인수, 매개변수
// 1. 인수, 인자값(Argument) : 함수 호출 시 넣어줄 값
// 2. 매개변수(parameter) : 함수의 도입부() 부분에 작성되고, 함수 호출 시 전달받을 데이터에 대한 표현
// 사용 예시)
// int sum(int a, int b): << 정수형 데이터 2개를 요구하는 함수 sum
// int func(void): << 매개변수 void가 적힌다면, 매개변수가 필요 없음을 명시

// 변수의 범위(Scope)
// 1. 전역 변수(Global) : 함수 외부에서 선언된 변수
//						 1. 프로그램 내에 어떤 함수에서도 사용 가능
//						 2. 프로그램 실행 중에 메모리 상에 계속 존재
//						 3. 특정 함수가 전역 변수의 값을 수정할 경우, 다른 함수에서 출력할 때 수정된 값이 호출됨
//						 4. 별도로 초기화를 하지 않을 경우, 데이터를 초기값으로 자동 설정(정수형 데이터 : 0)
// 2. 지역 변수(Local) : 함수 내부에서 선언된 변수
//						1. 변수가 선언된 함수 내에서만 사용 가능
//						2. 함수의 호출 시 생성되며 종료시 삭제
//						3. 함수의 매개변수 또한, 일종의 지역변수(함수 호출 시 값을 받고, 변수로 사용되며 종료 시 삭제되므로)
// 3. 정척변수(Static) : 프로그램이 종료되기 전까지 소멸하지 않는 변수
//						1. static 키워드가 붙은 변수를 의미 ex)static int count;
//						2. 정적 변수의 초기화는 1번만 진행 ((처음 실행할 때))
//						3. 초기화하는 값은 반드시 상수여야함 ((count = a; 불가))
//						4. 함수 내에서 만들어도, 해당 변수는 사라지지 않고 유지 (정적 지연 변수 : staic local)
//						5. 함수의 매개변수로 사용 불가
//						6. 변수의 범위가 파일 범위로 제한 (외부의 코드로 활용 불가 : 정적 전역 변수 : staic global)



// 메모리 영역
// 프로그램에서는 변수, 함수 등을 저장하는 메모리 영역 존재
// 영역 별로 저장되는 데이터들

// ===compile===
// 1.code 영역 : 실행할 프로그램의 코드가 저장되는 영역, 텍스트 영역이라고도 함
//				 CPU는 코드 영역에 저장되어있는 명령 하나하나를 가져와서 처리
//				 프로그램이 시작하고 종료하는 순간까지 메모리에 저장
// 2. Data 영역 : 프로그램의 전역 변수와 정적 변수가 저장되는 영역
//				프로그램 시작 시 할당되면서, 종료되면 소멸
// 3. BSS 영역 : Data 영역에 있는 변수 중에서 초기값이 없는 전역 변수나 배열, 정적 변수가 저장되는 영역

//===RUNTIME===
//4. Heap 영역 : 프로그래머가 직접 메모리를 할당하고 헤제하는 영역( 동적할당)
//				C언어에서는 malloc()으로, C++에서는 new를 통해 할당 작업
//				free(), delete를 통해 할당 해제
//				선입 선출(First-In, First-Out : FIFO : 먼저 들어간 데이터가 먼저 빠지는 방식)
//				  --> 낮은 주소(위)에서 높은 주소 방향(아래)으로 데이터가 쌓이는 형태
// 5. Stack 영역 : 프로그램이 자동으로 사용하는 임시 메모리 영역
//				  함수 호출 시 생성되는 지역변수나 매개 변수가 저장되는 영역으로, 함수의 호출이 완료되면 해당 데이터는 삭제
//				  스택 영역에 저장되는 함수의 호출 정보를 스택 프래임(stack frame)이라고 부름
//				  tack의 호출에는 리미트가 걸림 -> 일반적인 프로그램은 특정 횟수를 넘을 경우 더이상 호출되지 않도록 함 -> Overflow 현상 방지
//				  후입선출(Last-In, First Out : LIFO : 나중에 들어온 데이터가 먼저 빠져나가는 방식)
//				 --> 높은 주소(아래)에서 낮은 주소(위)로 데이터가 쌓이는 형태

// 오버플로(Overflow) : 한정되어있는 메모리 공간이 부족해 메모리 안에 있는 데이터가 넘쳐 흐르는 현상
// 문제되는 이유 : 데이터가 넘치면 상대 공간을 침범하는 일이 발생 -> 데이터를 제대로 불러올 수 없는 상황
#pragma endregion
//
//int a = 5;
//void GlobalF()
//{
//	a++;
//	cout << "(Global)  " << a << endl;
//}
//void localF()
//{
//	int a = 10;
//	a++;
//	cout << "(local)  " << a << endl;
//}
//void ParameterF(int a)
//{
//	a = 20;
//	a++;
//	cout << "(parameter)  " << a << endl;
//}
//void staticF()
//{
//	static int a = 1;
//	a++;
//	cout << "(static)  " << a << endl;
//}
//
//int main()
//{
//	cout << "(main/global)" << a << endl;
//	GlobalF();
//	cout << "(main/global)" << a << endl;
//	int a = 10; // 전역변수 a가 있는 상황에서 지역변수 a가 새로 만들어지면, 함수 내에서는 지역변수를 우선 처리
//	GlobalF();
//	cout << "(main/local)" << a << endl; // 현 시점에서 main은 지역변수이므로 Global에 의해 전역변수 a의 값을 몰라도, main의 a랑은 전혀 상관 없는 값이 됨
//	ParameterF(a);
//	cout << "(main/local)" << a << endl;// 매개변수로 a의 "값"을 전달, ParameterF에서 그 값을 기반으로 매개변수 a를 할당
//										// 그 매개변수 a와 main의 지역변수 a는 다른 데이터
//										// call by value(값에 의한 호출), 함수가 종료되도 변경된 내용이 적용되지 않음
//										// 해결 방안 : call by reference(참조에 의한 전달) : 매개변수를 포인터로 받거나, 참조자로 받으면 전달 가능
//	staticF();
//	cout << "(main/local)" << a << endl;
//
//	cout << endl << endl << endl << "다섯번 연속 출력" << endl;
//	for (int i = 0; i < 5; i++)
//	{
//		GlobalF();
//		localF();
//		ParameterF(a);
//		staticF();
//		cout << "=================" << endl;
//	}
//	cout << "작업 종료" << endl;
//
//
//
//	return 0;
//}
